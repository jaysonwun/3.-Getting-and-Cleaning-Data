q()
library(datasets)
data(iris)
?iris
iris
iris3
iris2
iris3
iris
data<-iris
View(iris)
View(iris)
help(mean)
mean(iris)
mean("Sepal.Length")
mean(iris$Sepal.Length)
s<-split(iris,iris$Species)
s
sapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
sapply(s,colMeans([,"Sepal.Length"])
sapply(s, mean)
sapply(s, s$Sepal.Length)
help(sapply)
sapply(s, mean)
sapply(s, mean, na.rm=TRUE)
sapply(s, mean, na.rm=FALSE)
sapply(s, mean(s))
lapply(s, mean)
s$setosa
mean(s$virginica)
mean(s$virginica$Sepal.Length)
x<-s$virginica
mean(x)
mean(x$Sepal.Length)
lapply(s,mean(s$Sepal.Length))
lapply(s,mean(s$Sepal.Length))
lapply(s$Sepal.Length, mean)
sapply(s$Sepal.Length, mean)
sapply(s$Sepal.Length, colMeans)
lapply(s$Sepal.Length, mean)
list()
lapply(s$Sepal.Length, mean(s$Sepal.Length))
lapply(s, mean(s$Sepal.Length))
colMeans(iris)
mean(irisSepal.L[irisSpecies=='virgin'])
mean(irisSepal.L[irisSpecies=='virginica'])
mean(iris$Sepal.L[irisSpecies=='virginica'])
mean(iris$Sepal.L[iris$Species=='virginica'])
mean(iris$Sepal.Length[iris$Species=='virginica'])
mean(iris$Sepal.Length[iris$Species=='virgin'])
mean(iris$Sepal.Length[iris$Species=='virginica'])
colMeans(iris)
help(apply)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:5], 2, mean)
apply(iris[, 1:4], 2, mean)
lapply(iris[, 1:4], 2, mean)
apply(s[,1:4])
apply(s[,1:4],2,mean)
s
apply(s$virginica[,1:4],2,mean)
library(datasets)
data(mtcars)
mtcars
c<-split(mtcars,mtcars$mpg)
c
s$6
s$mpg
s
c
c$mpg
mtcars
c<-mtcars$mpg==6
c
c<-mtcars$cyl=6
c<-mtcars$cyl==6
c
mtcars[c]
mtcars$c
mtcars[c]
c
d<-c
mtcars[d]
mtcars[1:11]
mtcars[1:11]
sort(mtcars)
help(sort)
sort(mtcars,decreasing=FALSE)
sort(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
c<-split(mtcars, mtcars$cyl)
c
help(tapply)
tapply(mtcars$mpg, mtcars$cyl, mean, simplify=TRUE)
tapply(mtcars$mpg, mtcars$cyl, mean, simplify=FALSE)
View(mtcars)
View(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
mtcars1<-mtcars$hp[mtcars$cyl==4]
mtcars1
mtcars2<-mtcars$hp[mtcars$cyl==8]
mtcars2
abs(mean(mtcars1)-mean(mtcars2))
install.packages("RMySQL")
ucscDb<-dbConnect(MySQL(),user="genome", host="genome-mysql.cse.uscs.edu")
library(RMySQL)
ucscDb<-dbConnect(MySQL(),user="genome", host="genome-mysql.cse.uscs.edu")
ucscDb<-dbConnect(MySQL(),user="genome", host="genome-mysql.cse.uscs.edu")
result<-dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
ucscDb<-dbConnect(MySQL(),user="genome", host="genome-mysql.cse.uscs.edu")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "48bc908222bdcc372de4d76f41656bf9353c06f4")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token=github_token)
req<- GET("https://api.github.com/users/jtleek/repos", gtoken)
req<- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
myapp <- oauth_app("github", "48bc908222bdcc372de4d76f41656bf9353c06f4")
sig = sign_oauth1.0("github", token= "48bc908222bdcc372de4d76f41656bf9353c06f4")
sig = sign_oauth1.0("github", token= "48bc908222bdcc372de4d76f41656bf9353c06f4", token_secret="48bc908222bdcc372de4d76f41656bf9353c06f4")
myapp <- oauth_app("github", "48bc908222bdcc372de4d76f41656bf9353c06f4")
oauth_endpoints("github")
myapp <- oauth_app("github", "48bc908222bdcc372de4d76f41656bf9353c06f4")
myapp <- oauth_app("github")
myapp <- oauth_app("github", "48bc908222bdcc372de4d76f41656bf9353c06f4")
myapp <- oauth_app("github", "48bc908222bdcc372de4d76f41656bf9353c06f4")
myapp <- oauth_app("github", GITHUB_CONSUMER_SECRET="48bc908222bdcc372de4d76f41656bf9353c06f4")
?oauth_app
myapp <- oauth_app("github", "48bc908222bdcc372de4d76f41656bf9353c06f4", secret = NULL)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token=github_token)
req <- "https://api.github.com/rate_limit", gtoken)
req <- GET("https://api.github.com/rate_limit", gtoken)
req <- GET("https://api.github.com/rate_limit", gtoken)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req
library(httr)
oauth_endpoints("github")
myapp<- oauth_app("github", "48bc908222bdcc372de4d76f41656bf9353c06f4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
homeTL=GET("https://api.github.com/users/jtleek/repos", req)
homeTL=GET("https://api.github.com/users/jtleek/repos", github_token)
sig = sign_oauth1.0(github, token="48bc908222bdcc372de4d76f41656bf9353c06f4", token_secret = "48bc908222bdcc372de4d76f41656bf9353c06f4")
sig = sign_oauth1.0("github", token="48bc908222bdcc372de4d76f41656bf9353c06f4", token_secret = "48bc908222bdcc372de4d76f41656bf9353c06f4")
myapp=oauth_app("github", key="48bc908222bdcc372de4d76f41656bf9353c06f4", secret = "48bc908222bdcc372de4d76f41656bf9353c06f4")
sig = sign_oauth1.0("github", token = "48bc908222bdcc372de4d76f41656bf9353c06f4", token_secret = "48bc908222bdcc372de4d76f41656bf9353c06f4")
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
stop_for_status(req)
content(req)
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
stop_for_status(req)
content(req)
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "48bc908222bdcc372de4d76f41656bf9353c06f4", "48bc908222bdcc372de4d76f41656bf9353c06f4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
stop_for_status(req)
content(req)
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "660e85a814a63b0e29d", "c7848db7573a9180f4434f4fc799eae4c851bbe4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
install.packages("httpuv")
library(httpuv)
myapp <- oauth_app("github", "660e85a814a63b0e29d", "c7848db7573a9180f4434f4fc799eae4c851bbe4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
eq <- GET("https://api.github.com/rate_limit", config(token = github_token))
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(httr)
install.packages("httr")
install.packages("httr")
library(httr)
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "ClientID", "ClientSecret")
myapp <- oauth_app("github", "660e85a814a63b0e29da", "c7848db7573a9180f4434f4fc799eae4c851bbe4")
ithub_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
ithub_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
ithub_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "660e85a814a63b0e29da", "c7848db7573a9180f4434f4fc799eae4c851bbe4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos")
homeTL= GET("https://api.github.com/users/jtleek/repos", gtoken)
json1=content(homeTL)
json2=jsonlite::fromJSON(toJSON(json1))
json1
homeTL
gtoken
gtoken<-github_token
homeTL= GET("https://api.github.com/users/jtleek/repos", gtoken)
gtoken
homeTL= GET("https://api.github.com/users/jtleek/repos", github_token)
content(req)
content(req$datasharing)
content(req)
str(req)
jsoned<- fromJSON(req)
df<- as.data.frame(req)
req
dim(req)
homeTL=GET(req)
homeTL=GET("http://api.github.com/users/jtleek/repos", "660e85a814a63b0e29da", "c7848db7573a9180f4434f4fc799eae4c851bbe4")
gtoken
req
homeTL=GET("https://api.github.com/users/jtleek/repos")
homeTL
json1=content(homeTL)
json1
json2=jsonlite::fromJSON(toJSON(json1))
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
json2=jsonlite::fromJSON(toJSON(json1))
json2[1, 1:4]
json2["datasharing"]
json2[,"datasharing"]
json1
json2
head(json2)
json2([5])
json2[5]
json2$5
json2$"datasharing"
json2[5]
json2
head(json2)
head(json2,5)
dim(json2)
;names(json2)
names(json2)
json2$name$created_at
json2$name
json2$name[name="datasharing"]
json2[name="datasharing"]
json2["name"="datasharing"]
json2[json2"name"="datasharing"]
json2[name=="datasharing"]
names(json2)
json1$name
json1$"name"
json1[2]
json1[5,45]
json1[[5]
json2[[5]]
json2[[5]][[45]]
json2[[5]]
names(json2)
names(json2("names"))
json2("names")
json2("name")
json2[2]
json2[2][45]
json2[45]
json2[,["names"]]
as.character(json2[,"name"])
json3<-data.frame(json2["names"], json2["created_at"])
names(json2)
json3<-data.frame(json2[,"names"], json2[,"created_at"])
names= as.character(json2[,"names"])
names= as.character(json2[2])
names
dates= as.character(json2[45])
my.data=data.frame(names,dates)
my.data
dim(my.data)
str(library)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
req <- GET("https://api.github.com/users/jtleek/repos")
req <- GET("https://api.github.com/users/jtleek/repos")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "660e85a814a63b0e29da", "c7848db7573a9180f4434f4fc799eae4c851bbe4")
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
content(req)
json1=(content(req))
json1
json2
json2[2,45]
json2["names"]
names(json2)
json2["name"]
json2["name"="datasharing"]
json2[name="datasharing"]
json2[json2$name="datasharing"]
json2[json2[2]="datasharing"]
json2[json2[2]=="datasharing"]
json2[2]
json2["name","created_at"]
json2["created_at"]
c(json2["name"],json2["created_at"])
data.frame(c(json2["name"],json2["created_at"]))
x<-data.frame(c(json2["name"],json2["created_at"]))
dim(x)
x<-data.frame((json2["name"],json2["created_at"]))
json2["name"], json2["created_at"]
json2["name":"created_at"]
json2["created_at"]
json2["name"]
json2[5,"name"]
json2[5,"created_at"]
json2[5,]
json2[5,2]
json2[5,45]
library(sqldf)
install.packages(sqldf)
install.packages("sqldf"")
install.packages("sqldf")
library(sqldf)
getwd()
setwd("~/Desktop/Coursera/Getting and Cleaning Data/")
setwd("~/Coursera/Getting and Cleaning Data/")
setwd("~")
getwd()
setwd(~)
setwd("~/Coursera/Getting and Cleaning Data/Week 2")
getwd()
url <- ("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
?download.file
download.file(url, destfile="acs.csv", mode="w")
head(acs)
acs<- read.csv("acs.csv")
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
con=url"http://biostat.jhsph.edu/~jleek/contact.html"
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readlines(con)
htmlCode=readLines(con)
close(con)
library(XML)
htmlCode
htmlCode[1]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
con=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
close(con)
download.file(url)
download.file(url, destfile="question5.for")
?read.file
x<-read.csv("question5.for")
x
x
head(x,6)
x<-read.csv("question5.for", header=T)
x
head(x,6)
dim(data)
dim(x)
?read.fwf
x<- read.fwf(file="question5.for", widths(=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4)), skip=4)
x<- read.fwf(file="question5.for", widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4)), skip=4)
x<- read.fwf(file="question5.for", widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
x
head(x)
sum(x[4])
